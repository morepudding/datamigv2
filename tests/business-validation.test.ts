/**
 * Tests de validation des r√®gles m√©tier PLM vers IFS
 * V√©rifie que l'outil respecte parfaitement les sp√©cifications m√©tier
 */
import { describe, test, expect, beforeAll } from '@jest/globals';
import { BusinessTestHelper } from './helpers/business-test-helper';
import * as path from 'path';
import * as fs from 'fs';

describe('üîç Validation des R√®gles M√©tier - Syst√®me PLM vers IFS', () => {
  let testData: any[] = [];
  let masterPartStats: any;
  let masterPartAllStats: any;
  let revisionStats: any;

  beforeAll(async () => {
    console.log('\nüöÄ Chargement des donn√©es de test...');
    
    // Nettoyage des r√©pertoires
    BusinessTestHelper.cleanupDirectories();
    
    // Chargement du fichier d'entr√©e
    testData = await BusinessTestHelper.loadTestData();
    
    // Calcul des statistiques m√©tier
    masterPartStats = BusinessTestHelper.validateMasterPartBusinessRules(testData);
    masterPartAllStats = BusinessTestHelper.validateMasterPartAllBusinessRules(testData);
    revisionStats = BusinessTestHelper.validateRevisionLogic(testData);
    
    console.log('\nüìä Donn√©es charg√©es et analys√©es avec succ√®s');
  }, 30000);

  describe('üìã MASTER PART - R√©f√©rentiel Principal (hors achats)', () => {
    test('doit charger les donn√©es d\'entr√©e correctement', () => {
      expect(testData).toBeDefined();
      expect(testData.length).toBeGreaterThan(0);
      expect(masterPartStats.totalLines).toBe(testData.length);
      console.log(`‚úÖ ${masterPartStats.totalLines} lignes charg√©es`);
    });

    test('doit exclure les pi√®ces d\'achat (Source = Buy)', () => {
      expect(masterPartStats.excluded.buyParts).toBeGreaterThan(0);
      expect(masterPartStats.afterSourceFilter).toBe(
        masterPartStats.totalLines - masterPartStats.excluded.buyParts
      );
      console.log(`üõçÔ∏è ${masterPartStats.excluded.buyParts} pi√®ces Buy exclues`);
    });

    test('doit filtrer sur les classifications AN29 (derniers 10 caract√®res)', () => {
      expect(masterPartStats.afterClassificationFilter).toBeLessThanOrEqual(
        masterPartStats.afterSourceFilter
      );
      console.log(`üìã ${masterPartStats.excluded.shortClassifications} classifications invalides exclues`);
    });

    test('doit exclure les pi√®ces fant√¥mes AN29-02-00 avec Phantom = No', () => {
      expect(masterPartStats.afterPhantomFilter).toBeLessThanOrEqual(
        masterPartStats.afterClassificationFilter
      );
      console.log(`üëª ${masterPartStats.excluded.phantomAN29_02_00} pi√®ces fant√¥mes AN29-02-00 exclues`);
    });

    test('doit exclure les r√©visions A en cours de travail', () => {
      expect(masterPartStats.afterRevisionFilter).toBeLessThanOrEqual(
        masterPartStats.afterPhantomFilter
      );
      expect(masterPartStats.excluded.revisionAInWork).toBeGreaterThanOrEqual(0);
      console.log(`üîÑ ${masterPartStats.excluded.revisionAInWork} r√©visions A en cours exclues`);
    });

    test('doit d√©duplicquer sur la colonne Number', () => {
      expect(masterPartStats.afterDeduplication).toBeLessThanOrEqual(
        masterPartStats.afterRevisionFilter
      );
      expect(masterPartStats.excluded.duplicates).toBeGreaterThanOrEqual(0);
      console.log(`üîÇ ${masterPartStats.excluded.duplicates} doublons supprim√©s`);
    });

    test('doit respecter la logique de filtrage en cascade', () => {
      // V√©rification de la coh√©rence du pipeline de filtrage
      expect(masterPartStats.afterSourceFilter).toBeLessThanOrEqual(masterPartStats.totalLines);
      expect(masterPartStats.afterClassificationFilter).toBeLessThanOrEqual(masterPartStats.afterSourceFilter);
      expect(masterPartStats.afterPhantomFilter).toBeLessThanOrEqual(masterPartStats.afterClassificationFilter);
      expect(masterPartStats.afterRevisionFilter).toBeLessThanOrEqual(masterPartStats.afterPhantomFilter);
      expect(masterPartStats.afterDeduplication).toBeLessThanOrEqual(masterPartStats.afterRevisionFilter);
      
      console.log(`üîÑ Pipeline de filtrage coh√©rent: ${masterPartStats.totalLines} ‚Üí ${masterPartStats.afterDeduplication}`);
    });
  });

  describe('üìã MASTER PART ALL - R√©f√©rentiel Complet (inclut achats)', () => {
    test('doit inclure les pi√®ces d\'achat (diff√©rence cl√© avec Master Part)', () => {
      expect(masterPartAllStats.included.buyParts).toBeGreaterThan(0);
      expect(masterPartAllStats.included.makeParts).toBeGreaterThan(0);
      console.log(`üõçÔ∏è ${masterPartAllStats.included.buyParts} pi√®ces Buy incluses`);
      console.log(`üîß ${masterPartAllStats.included.makeParts} pi√®ces Make incluses`);
    });

    test('doit filtrer uniquement sur Classification.includes("AN29")', () => {
      expect(masterPartAllStats.afterClassificationFilter).toBeLessThanOrEqual(
        masterPartAllStats.totalLines
      );
      console.log(`üìã ${masterPartAllStats.afterClassificationFilter} lignes apr√®s filtre AN29`);
    });

    test('doit appliquer le filtre √âtat (Released OU In Work non-A)', () => {
      expect(masterPartAllStats.afterStateFilter).toBeLessThanOrEqual(
        masterPartAllStats.afterClassificationFilter
      );
      console.log(`üîÑ ${masterPartAllStats.afterStateFilter} lignes apr√®s filtre √âtat`);
    });

    test('doit avoir plus de r√©sultats que Master Part (inclusion des Buy)', () => {
      expect(masterPartAllStats.afterDeduplication).toBeGreaterThanOrEqual(
        masterPartStats.afterDeduplication
      );
      
      const difference = masterPartAllStats.afterDeduplication - masterPartStats.afterDeduplication;
      expect(difference).toBeGreaterThanOrEqual(0);
      console.log(`üìà Diff√©rence Master Part ALL vs Master Part: ${difference} lignes`);
    });
  });

  describe('üîÑ LOGIQUE DE TRANSFORMATION DES R√âVISIONS', () => {
    test('doit conserver les r√©visions pour les pi√®ces Released', () => {
      expect(revisionStats.released.total).toBeGreaterThan(0);
      expect(revisionStats.released.unchanged).toBe(revisionStats.released.total);
      console.log(`‚úÖ ${revisionStats.released.total} pi√®ces Released - r√©visions inchang√©es`);
    });

    test('doit d√©cr√©menter les r√©visions pour In Work selon le mapping F‚ÜíE‚ÜíD‚ÜíC‚ÜíB‚ÜíA', () => {
      expect(revisionStats.inWork.total).toBeGreaterThan(0);
      console.log(`üîÑ In Work: ${revisionStats.inWork.decremented} d√©cr√©ment√©es, ${revisionStats.inWork.unchanged} inchang√©es`);
    });

    test('doit d√©cr√©menter les r√©visions pour Under Review selon le mapping', () => {
      if (revisionStats.underReview.total > 0) {
        console.log(`üìã Under Review: ${revisionStats.underReview.decremented} d√©cr√©ment√©es, ${revisionStats.underReview.unchanged} inchang√©es`);
      } else {
        console.log(`üìã Aucune pi√®ce Under Review dans les donn√©es test`);
      }
    });

    test('doit appliquer la logique de d√©cr√©ment correctement', () => {
      const totalDecremented = revisionStats.inWork.decremented + revisionStats.underReview.decremented;
      const totalUnchanged = revisionStats.released.unchanged + revisionStats.inWork.unchanged + revisionStats.underReview.unchanged;
      
      expect(totalDecremented + totalUnchanged).toBeGreaterThan(0);
      console.log(`üîÑ Total r√©visions transform√©es: ${totalDecremented}, inchang√©es: ${totalUnchanged}`);
    });
  });

  describe('üéØ COH√âRENCE GLOBALE ET VALIDATIONS', () => {
    test('doit respecter la logique Master Part vs Master Part ALL', () => {
      const difference = masterPartAllStats.afterDeduplication - masterPartStats.afterDeduplication;
      
      // Master Part ALL doit √™tre >= Master Part (inclusion des Buy)
      expect(masterPartAllStats.afterDeduplication).toBeGreaterThanOrEqual(
        masterPartStats.afterDeduplication
      );
      
      // La diff√©rence ne peut pas d√©passer le nombre de pi√®ces Buy filtr√©es
      expect(difference).toBeLessThanOrEqual(masterPartAllStats.included.buyParts);
      
      console.log(`üéØ Validation coh√©rence: diff√©rence ${difference} <= Buy incluses ${masterPartAllStats.included.buyParts}`);
    });

    test('doit g√©n√©rer un rapport de validation complet', () => {
      const report = BusinessTestHelper.generateBusinessValidationReport(
        masterPartStats,
        masterPartAllStats,
        revisionStats
      );
      
      expect(report).toContain('VALIDATION DES R√àGLES M√âTIER');
      expect(report).toContain('MASTER PART');
      expect(report).toContain('MASTER PART ALL');
      expect(report).toContain('LOGIQUE DE TRANSFORMATION DES R√âVISIONS');
      
      console.log(report);
    });

    test('doit valider les exclusions et inclusions m√©tier', () => {
      // V√©rifications de bon sens m√©tier
      expect(masterPartStats.excluded.buyParts).toBeGreaterThan(0);
      expect(masterPartAllStats.included.buyParts).toBeGreaterThan(0);
      expect(masterPartAllStats.included.makeParts).toBeGreaterThan(0);
      
      // Les exclusions Master Part ne doivent pas d√©passer les donn√©es d'entr√©e
      const totalExcluded = masterPartStats.excluded.buyParts + 
                           masterPartStats.excluded.shortClassifications +
                           masterPartStats.excluded.phantomAN29_02_00 +
                           masterPartStats.excluded.revisionAInWork +
                           masterPartStats.excluded.duplicates;
      
      expect(totalExcluded).toBeLessThanOrEqual(masterPartStats.totalLines);
      console.log(`üìä Total exclusions coh√©rentes: ${totalExcluded} <= ${masterPartStats.totalLines}`);
    });
  });

  describe('üìÑ G√âN√âRATION DE DOCUMENTS ET MAPPING', () => {
    test('doit pr√©parer les dossiers de sortie', () => {
      const outputDir = path.join(process.cwd(), 'output');
      const tmpDir = path.join(process.cwd(), 'tmp');
      
      expect(fs.existsSync(outputDir)).toBe(true);
      expect(fs.existsSync(tmpDir)).toBe(true);
      console.log(`üìÅ Dossiers de sortie pr√©par√©s: output/ et tmp/`);
    });

    test('doit valider la structure des donn√©es pour le mapping IFS', () => {
      // V√©rifier que les donn√©es ont les colonnes essentielles pour IFS
      const requiredForIFS = ['Number', 'Name', 'Classification', 'State', 'Revision', 'Context'];
      const firstRow = testData[0];
      
      requiredForIFS.forEach(column => {
        expect(firstRow).toHaveProperty(column);
      });
      
      console.log(`‚úÖ Colonnes requises pour IFS pr√©sentes: ${requiredForIFS.join(', ')}`);
    });

    test('doit identifier le code projet pour le transcodage', () => {
      const firstRow = testData[0];
      const context = (firstRow.Context || '').toString().trim();
      
      expect(context.length).toBeGreaterThanOrEqual(5);
      console.log(`üè∑Ô∏è Code projet identifi√©: ${context.substring(0, 5)}`);
    });
  });
});
