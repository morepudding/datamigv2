#!/usr/bin/env node

/**
 * Script principal pour lancer les tests du syst√®me de migration
 * Utilise le fichier JY5MB_complete_boat_20250428_0927CEST(in).csv comme donn√©es de test
 */

import { execSync } from 'child_process';
import * as path from 'path';
import * as fs from 'fs';

const PROJECT_ROOT = process.cwd();
const TEST_FILE = path.join(PROJECT_ROOT, 'JY5MB_complete_boat_20250428_0927CEST(in).csv');

console.log('üß™ SYST√àME DE TEST - MIGRATION PLM vers IFS');
console.log('='.repeat(60));
console.log(`üìÅ Projet: ${PROJECT_ROOT}`);
console.log(`üìÑ Fichier de test: ${path.basename(TEST_FILE)}`);

// V√©rification des pr√©requis
if (!fs.existsSync(TEST_FILE)) {
  console.error(`‚ùå ERREUR: Fichier de test manquant: ${TEST_FILE}`);
  process.exit(1);
}

console.log(`‚úÖ Fichier de test trouv√©: ${fs.statSync(TEST_FILE).size} bytes`);

// Configuration des tests
const testConfigs = [
  {
    name: 'Tests Unitaires - Master Part',
    command: 'npx jest tests/processors/master-part.test.ts --verbose',
    timeout: 30000
  },
  {
    name: 'Tests Unitaires - Master Part All',
    command: 'npx jest tests/processors/master-part-all.test.ts --verbose',
    timeout: 30000
  },
  {
    name: 'Test d\'Int√©gration Complet',
    command: 'npx jest tests/integration/full-system.test.ts --verbose --detectOpenHandles',
    timeout: 120000
  },
  {
    name: 'Tous les Tests',
    command: 'npx jest --coverage --verbose',
    timeout: 180000
  }
];

async function runTest(config: typeof testConfigs[0]): Promise<{success: boolean, duration: number, output?: string}> {
  const startTime = Date.now();
  console.log(`\nüöÄ Lancement: ${config.name}`);
  console.log(`üìù Commande: ${config.command}`);
  console.log('-'.repeat(40));

  try {
    const output = execSync(config.command, {
      cwd: PROJECT_ROOT,
      stdio: 'inherit',
      timeout: config.timeout,
      encoding: 'utf-8'
    });

    const duration = Date.now() - startTime;
    console.log(`‚úÖ ${config.name} - SUCC√àS (${duration}ms)`);
    
    return { success: true, duration };
  } catch (error: any) {
    const duration = Date.now() - startTime;
    console.error(`‚ùå ${config.name} - √âCHEC (${duration}ms)`);
    if (error.stdout) console.log('STDOUT:', error.stdout);
    if (error.stderr) console.error('STDERR:', error.stderr);
    
    return { success: false, duration, output: error.message };
  }
}

async function main() {
  const results = [];
  const overallStart = Date.now();

  console.log('\nüéØ S√âLECTION DU TYPE DE TEST:');
  console.log('1. Tests unitaires seulement');
  console.log('2. Test d\'int√©gration complet');
  console.log('3. Tous les tests avec couverture');

  // Pour l'instant, lance tous les tests par d√©faut
  const selectedTests = testConfigs.slice(0, 3); // Exclut "Tous les Tests" pour √©viter la duplication

  for (const config of selectedTests) {
    const result = await runTest(config);
    results.push({
      name: config.name,
      ...result
    });
  }

  const totalDuration = Date.now() - overallStart;
  const successCount = results.filter(r => r.success).length;

  // Rapport final
  console.log('\n' + '='.repeat(60));
  console.log('üìä RAPPORT FINAL DES TESTS');
  console.log('='.repeat(60));

  results.forEach(result => {
    const status = result.success ? '‚úÖ SUCC√àS' : '‚ùå √âCHEC';
    console.log(`${status} ${result.name} (${result.duration}ms)`);
  });

  console.log('\nüìà R√âSUM√â:');
  console.log(`‚è±Ô∏è  Dur√©e totale: ${totalDuration}ms`);
  console.log(`üéØ R√©sultat: ${successCount}/${results.length} tests r√©ussis`);

  if (successCount === results.length) {
    console.log('üéâ TOUS LES TESTS SONT PASS√âS AVEC SUCC√àS!');
    console.log('\nüìÅ R√©sultats disponibles dans:');
    console.log(`   üìÑ Fichiers CSV: ${path.join(PROJECT_ROOT, 'output')}`);
    console.log(`   üìä Couverture: ${path.join(PROJECT_ROOT, 'coverage')}`);
  } else {
    console.log('‚ö†Ô∏è  CERTAINS TESTS ONT √âCHOU√â');
    console.log('üîç V√©rifiez les logs ci-dessus pour plus de d√©tails');
    process.exit(1);
  }
}

// Gestion des erreurs non captur√©es
process.on('uncaughtException', (error) => {
  console.error('‚ùå Erreur non captur√©e:', error);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå Promesse rejet√©e non g√©r√©e:', reason);
  process.exit(1);
});

// Lancement du script
main().catch(error => {
  console.error('‚ùå Erreur fatale:', error);
  process.exit(1);
});
